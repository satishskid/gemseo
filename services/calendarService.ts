import type { GeminiResults, CalendarItem } from '../types';

/**
 * Generate iCalendar (.ics) format data for Google Calendar import
 */
export const generateICalendar = (results: GeminiResults, businessName: string): string => {
  const now = new Date();
  const timestamp = formatICalDateTime(now);
  
  // Generate unique calendar ID
  const calendarId = `gemseo-${businessName.replace(/[^a-zA-Z0-9]/g, '')}-${Date.now()}`;
  
  let icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//GemSEO//Growth Plan Calendar//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'X-WR-CALNAME:Growth Plan - ' + businessName,
    'X-WR-TIMEZONE:Asia/Kolkata',
    'BEGIN:VTIMEZONE',
    'TZID:Asia/Kolkata',
    'BEGIN:STANDARD',
    'DTSTART:19700101T000000',
    'TZOFFSETFROM:+0530',
    'TZOFFSETTO:+0530',
    'END:STANDARD',
    'END:VTIMEZONE'
  ].join('\n');

  // Add calendar events for each publishing item
  results.publishingCalendar.forEach((item, index) => {
    const event = createCalendarEvent(item, businessName, index, timestamp);
    icsContent += '\n' + event;
  });

  icsContent += '\nEND:VCALENDAR';
  return icsContent;
};

/**
 * Create individual calendar event
 */
const createCalendarEvent = (
  item: Omit<CalendarItem, 'id' | 'status' | 'date'>,
  businessName: string,
  index: number,
  timestamp: string
): string => {
  const eventId = `gemseo-event-${Date.now()}-${index}`;
  const startDate = calculateEventDate(item.week, item.day);
  const endDate = new Date(startDate.getTime() + 60 * 60 * 1000); // 1 hour duration
  
  const description = [
    `Platform: ${item.platform}`,
    `Content: ${item.content}`,
    item.notes ? `Notes: ${item.notes}` : '',
    '',
    'Generated by GemSEO'
  ].filter(Boolean).join('\\n');

  return [
    'BEGIN:VEVENT',
    `UID:${eventId}@gemseo.app`,
    `DTSTAMP:${timestamp}`,
    `DTSTART:${formatICalDateTime(startDate)}`,
    `DTEND:${formatICalDateTime(endDate)}`,
    `SUMMARY:${item.title}`,
    `DESCRIPTION:${description}`,
    `CATEGORIES:Growth Plan,${item.platform}`,
    'STATUS:CONFIRMED',
    'TRANSP:OPAQUE',
    'END:VEVENT'
  ].join('\n');
};

/**
 * Calculate event date based on week and day
 */
const calculateEventDate = (week: string, day: string): Date => {
  const now = new Date();
  const currentWeek = getWeekNumber(now);
  const currentYear = now.getFullYear();
  
  // Parse week number from string like "Week 1", "Week 2", etc.
  const weekMatch = week.match(/Week (\d+)/i);
  const weekNumber = weekMatch ? parseInt(weekMatch[1]) : 1;
  
  // Parse day of week
  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  const targetDay = days.indexOf(day.toLowerCase());
  
  // Calculate target date
  const targetDate = new Date(now);
  const weeksFromNow = weekNumber - currentWeek;
  targetDate.setDate(targetDate.getDate() + (weeksFromNow * 7));
  
  // Set to target day of week
  const currentDay = targetDate.getDay();
  const daysUntilTarget = (targetDay - currentDay + 7) % 7;
  targetDate.setDate(targetDate.getDate() + daysUntilTarget);
  
  // Set to 10 AM for better scheduling
  targetDate.setHours(10, 0, 0, 0);
  
  return targetDate;
};

/**
 * Get current week number
 */
const getWeekNumber = (date: Date): number => {
  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
};

/**
 * Format date for iCalendar (YYYYMMDDTHHMMSS)
 */
const formatICalDateTime = (date: Date): string => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  
  return `${year}${month}${day}T${hours}${minutes}${seconds}`;
};

/**
 * Download calendar as .ics file
 */
export const downloadCalendar = (results: GeminiResults, businessName: string): void => {
  try {
    const icsContent = generateICalendar(results, businessName);
    const blob = new Blob([icsContent], { 
      type: 'text/calendar;charset=utf-8' 
    });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `growth-plan-calendar-${businessName.replace(/[^a-zA-Z0-9]/g, '_')}.ics`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setTimeout(() => URL.revokeObjectURL(url), 100);
  } catch (error) {
    console.error('Failed to download calendar:', error);
    throw new Error('Unable to download calendar file');
  }
};

/**
 * Open calendar directly in Google Calendar (if user is logged in)
 */
export const openInGoogleCalendar = (results: GeminiResults, businessName: string): void => {
  try {
    const icsContent = generateICalendar(results, businessName);
    const encodedData = encodeURIComponent(icsContent);
    
    // Create a data URL for the ICS content
    const dataUrl = `data:text/calendar;charset=utf-8,${encodedData}`;
    
    // Google Calendar import URL
    const googleCalendarUrl = `https://calendar.google.com/calendar/render?cid=${encodeURIComponent(dataUrl)}`;
    
    // Open in new tab
    window.open(googleCalendarUrl, '_blank');
  } catch (error) {
    console.error('Failed to open Google Calendar:', error);
    // Fallback to download
    downloadCalendar(results, businessName);
  }
};

/**
 * Generate calendar import instructions
 */
export const getCalendarImportInstructions = (): string => {
  return `
To import your growth plan calendar:

1. **Google Calendar:**
   - Download the .ics file
   - Open Google Calendar
   - Click the + next to "Other calendars"
   - Select "Import"
   - Upload the .ics file

2. **Apple Calendar:**
   - Download the .ics file
   - Double-click the file
   - Choose which calendar to add it to

3. **Outlook:**
   - Download the .ics file
   - Go to File > Open & Export > Import/Export
   - Select "Import an iCalendar (.ics)"
   - Choose the .ics file

The calendar will show all your scheduled content with reminders.
  `.trim();
};